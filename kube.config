apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{MIC_NAMESPACE}}
  name: {{MIC_NAME}}
  labels:
    app: {{MIC_NAME}}
    microticaService: {{MIC_NAME}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{MIC_NAME}}
  template:
    metadata:
      labels:
        app: {{MIC_NAME}}
    spec:
      imagePullSecrets:
        - name: {{MIC_REGISTRY}}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: aws/instance-lifecycle
                operator: In
                values:
                - "{{INSTANCE_LIFECYCLE}}"
      containers:
      - name: {{MIC_NAME}}
        image: "{{MIC_IMAGE}}"
        env: "{{MIC_CONFIGURATIONS}}"
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "{{MIC_AS_MEMORY}}Mi"
            cpu: "{{MIC_AS_CPU}}m"
          limits:
            memory: "{{MIC_AS_MAX_MEMORY}}Mi"
            cpu: "{{MIC_AS_MAX_CPU}}m"
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{MIC_NAMESPACE}}
  name: {{MIC_NAME}}
  labels:
    microticaService: {{MIC_NAME}}
  annotations:
    app: {{MIC_NAME}}
spec:
  ports:
  - port: 80
    protocol: TCP
  type: ClusterIP
  selector:
    app: {{MIC_NAME}}
---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta2
metadata:
  namespace: {{MIC_NAMESPACE}}
  name: {{MIC_NAME}}
  labels:
    microticaService: {{MIC_NAME}}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{MIC_NAME}}
  minReplicas: {{MIC_AS_MIN_REPLICAS}}
  maxReplicas: {{MIC_AS_MAX_REPLICAS}}
  metrics:
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: {{MIC_AS_MEMORY_UTILIZATION}}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  name: {{MIC_NAME}}
  namespace: {{MIC_NAMESPACE}}
spec:
  rules:
    - host: "{{FE_INGRESS_HOST}}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{MIC_NAME}}
                port:
                  number: 80
    - host: "{{FE_INGRESS_HOST_2}}"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{MIC_NAME}}
                port:
                  number: 80
  tls:
    - hosts:
        - {{FE_INGRESS_HOST}}
        - {{FE_INGRESS_HOST_2}}
      secretName: fiyu-online-tls